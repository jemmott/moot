var currentMode = "standby"; // Initial mode
var ws;
var frequency = 100; // Initial passive frequency
var lastPassiveTime = 0;
var modeStartTime = Date.now(); // Track the start time of the current mode

// Function to switch to a different pattern
function switchToMode(newMode) {
  currentMode = newMode;
  patternName(currentMode); // Load the pattern by name
  modeStartTime = Date.now(); // Reset the start time for the new mode
}

export function beforeRender(delta) {
  var currentTime = Date.now();

  // Central logic to handle automatic transitions and WebSocket data
  if (currentMode === "boot") {
    if (currentTime - modeStartTime >= 5000) { // Check if 5 seconds have passed
      switchToMode("interactive-passive");
    }
  } else if (currentMode === "shutdown") {
    if (currentTime - modeStartTime >= 5000) { // Check if 5 seconds have passed
      switchToMode("standby");
    }
  } else if (currentMode === "interactive-passive") {
    if (frequency > 100) {
      switchToMode("interactive-forwards");
    } else if (frequency < 100) {
      switchToMode("interactive-backwards");
    } else if (currentTime - lastPassiveTime >= 60000) {
      switchToMode("shutdown");
    }
  } else if (currentMode === "interactive-forwards") {
    if (frequency < 100) {
      switchToMode("interactive-backwards");
    } else if (frequency === 100) {
      switchToMode("interactive-passive");
      lastPassiveTime = Date.now();
    }
  } else if (currentMode === "interactive-backwards") {
    if (frequency > 100) {
      switchToMode("interactive-forwards");
    } else if (frequency === 100) {
      switchToMode("interactive-passive");
      lastPassiveTime = Date.now();
    }
  }
  // Add logic for other modes as needed
}

export function render(index) {
  // This function can be used for any global rendering logic if necessary
}

// WebSocket Client to Receive Frequency Data
function setupWebSocket() {
  ws = new WebSocket('ws://raspberrypi-ip:8765');
  ws.onmessage = function(event) {
    let data = JSON.parse(event.data);
    frequency = data.frequency;
    if (currentMode === "standby" && frequency !== 100) {
      switchToMode("boot");
    } else if (currentMode === "interactive-passive") {
      lastPassiveTime = Date.now();
    }
  };
  ws.onopen = function() {
    console.log("WebSocket connection established");
  };
  ws.onclose = function() {
    console.log("WebSocket connection closed");
    setTimeout(setupWebSocket, 1000); // Reconnect after 1 second
  };
  ws.onerror = function(error) {
    console.log("WebSocket error: " + error);
  };
}

// Initialize WebSocket
setupWebSocket();

// Initialize the first mode
if (currentMode === "standby") {
  standbyMode();
}
